package persistence.inmemory.repository;

import domain.notificationcenter.spi.NotificationSettingRepository;
import domain.filemanager.api.entity.Permission;
import domain.notificationcenter.spi.ServiceConfigurationRepository;
import persistence.inmemory.entity.File;

import java.util.*;
import java.util.stream.Collectors;

public class InMemoryRepositoryNotification implements domain.filemanager.spi.FileRepository, NotificationSettingRepository, ServiceConfigurationRepository {

    /***********************
     *
     * File Manager
     *
     */

    private final Map<String, File> filesInMemory = new HashMap<>();

    public Map<String, File> getAllfiles() {
        return filesInMemory;
    }

    public Optional<File> findByName(String fileName) {
        return filesInMemory.values().stream()
            .filter(mockFile -> hasFileName(mockFile, fileName))
            .findFirst();
    }

    private boolean hasFileName(File file, String fileName) {
        return fileName.equals(file.getName());
    }

    @Override
    public List<domain.filemanager.api.entity.File> findFilesBySharedUser(String userId) {
        return filesInMemory.values()
                .stream()
                .filter(f -> isSharedToUser(f, userId))
                .collect(Collectors.toList());
    }

    private boolean isSharedToUser(domain.filemanager.api.entity.File file, String userId) {
        return file.getSharedUsersIdWithPermission()
                .keySet()
                .contains(userId);
    }


    @Override
    public File findFileById(String fileId) {
        return filesInMemory.get(fileId);
    }

    @Override
    public List<domain.filemanager.api.entity.File> findFilesByUserId(String ownerId) {
        return filesInMemory.values()
                .stream()
                .filter(file -> ownerId.equals(file.getOwnerId()))
                .collect(Collectors.toList());
    }

    @Override
    public File addFile(String name, byte[] data, String ownerId) {
        File fileToSave = new File(autoGeneratedId(), name, data, ownerId);
        filesInMemory.put(fileToSave.getId(), fileToSave);
        return fileToSave;
    }

    @Override
    public void shareFile(String fileId, Map<String, Permission> usersIdToShareWithPermission) {
        File fileToAddShareUsers = filesInMemory.get(fileId);
        fileToAddShareUsers.setSharedUsersIdWithPermission(usersIdToShareWithPermission);
    }

    @Override
    public void deleteFile(String name) {
        filesInMemory.remove(name);
    }

    private String autoGeneratedId() {
        return String.valueOf(filesInMemory.size());
    }


    /***********************
     *
     * Notification Manager
     *
     */
    private final Map<SettingKey, Boolean> userEventSettings = new HashMap<>();

    @Override
    public void saveNotificationSetting(String userId, List<String> servicesId, List<String> notificationTypes, boolean isEnable) {
        for (String serviceId : servicesId) {
            for (String notificationType : notificationTypes) {
                saveUserNotificationSetting(userId, serviceId, notificationType, isEnable);
            }
        }
    }

    private void saveUserNotificationSetting(String userId, String serviceId, String notificationType, boolean isEnable) {
        SettingKey key = new SettingKey(userId, serviceId, notificationType);
        userEventSettings.put(key, isEnable);
    }

    @Override
    public boolean getNotificationSetting(String userId, String serviceId, String notificationType) {
        SettingKey key = new SettingKey(userId, serviceId, notificationType);
        if (!userEventSettings.containsKey(key)) return false;
        return userEventSettings.get(key);
    }

    private static class SettingKey {
        private String userId;
        private String serviceId;
        private String notificationType;

        public SettingKey(String userId, String serviceId, String notificationType) {
            this.userId = userId;
            this.serviceId = serviceId;
            this.notificationType = notificationType;
        }

        public String getUserId() {
            return userId;
        }

        public String getServiceId() {
            return serviceId;
        }

        public String getNotificationType() {
            return notificationType;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            SettingKey that = (SettingKey) o;

            if (notificationType != null ? !notificationType.equals(that.notificationType) : that.notificationType != null)
                return false;
            if (serviceId != null ? !serviceId.equals(that.serviceId) : that.serviceId != null) return false;
            if (userId != null ? !userId.equals(that.userId) : that.userId != null) return false;

            return true;
        }

        @Override
        public int hashCode() {
            int result = userId != null ? userId.hashCode() : 0;
            result = 31 * result + (serviceId != null ? serviceId.hashCode() : 0);
            result = 31 * result + (notificationType != null ? notificationType.hashCode() : 0);
            return result;
        }
    }


    /***********************
     *
     * Service Configuration Repository
     *
     */
    private final Map<ConfigurationSettingKey, Map<String, String>> userServiceConfigurationSettings = new HashMap<>();

    @Override
    public void saveServiceConfiguration(String userId, String serviceId, Map<String, String> serviceConfiguration) {
        userServiceConfigurationSettings.put(new ConfigurationSettingKey(userId, serviceId), serviceConfiguration);
    }

    @Override
    public Map<String, String> getServiceConfiguration(String userId, String serviceId) {
        if (!userServiceConfigurationSettings.containsKey(new ConfigurationSettingKey(userId, serviceId))) return Collections.emptyMap();
        return userServiceConfigurationSettings.get(new ConfigurationSettingKey(userId, serviceId));
    }

    private static class ConfigurationSettingKey {
        private String userId;
        private String serviceId;

        public ConfigurationSettingKey(String userId, String serviceId) {
            this.userId = userId;
            this.serviceId = serviceId;
        }

        public String getUserId() {
            return userId;
        }

        public String getServiceId() {
            return serviceId;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ConfigurationSettingKey that = (ConfigurationSettingKey) o;

            if (serviceId != null ? !serviceId.equals(that.serviceId) : that.serviceId != null) return false;
            if (userId != null ? !userId.equals(that.userId) : that.userId != null) return false;

            return true;
        }

        @Override
        public int hashCode() {
            int result = userId != null ? userId.hashCode() : 0;
            result = 31 * result + (serviceId != null ? serviceId.hashCode() : 0);
            return result;
        }
    }

}
