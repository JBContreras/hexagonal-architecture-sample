package persistence.inmemory.repository;

import domain.filemanager.api.entity.File;
import domain.filemanager.api.entity.Permission;
import domain.filemanager.spi.FileRepository;
import persistence.inmemory.entity.IMFile;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

public class IMFileRepository implements FileRepository {

    private final Map<String, IMFile> filesInMemory = new HashMap<>();

    public Map<String, IMFile> getAllfiles() {
        return filesInMemory;
    }

    public Optional<IMFile> findByName(String fileName) {
        return filesInMemory.values().stream()
            .filter(mockFile -> hasFileName(mockFile, fileName))
            .findFirst();
    }

    private boolean hasFileName(IMFile file, String fileName) {
        return fileName.equals(file.getName());
    }

    @Override
    public File findFileById(String fileId) {
        return filesInMemory.get(fileId);
    }

    @Override
    public File addFile(String name, byte[] data, String ownerId) {
        IMFile fileToSave = new IMFile(autoGeneratedId(), name, data, ownerId);
        filesInMemory.put(fileToSave.getId(), fileToSave);
        return fileToSave;
    }

    @Override
    public void shareFile(String fileId, Map<String, Permission> usersIdToShareWithPermission) {
        IMFile fileToAddShareUsers = filesInMemory.get(fileId);
        fileToAddShareUsers.setSharedUsersIdWithPermission(usersIdToShareWithPermission);
    }

    @Override
    public void deleteFile(String name) {
        filesInMemory.remove(name);
    }

    private String autoGeneratedId() {
        return String.valueOf(filesInMemory.size());
    }
}
